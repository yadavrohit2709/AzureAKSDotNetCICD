steps:
- bash: |
    cd $(projectName)
    docker build \
        -t $(registryServerName)/$(imageName):$(imageTag) \
        .
  failOnStderr: true
  displayName: 'docker build'
- bash: |
    echo '$(registryPassword)' | docker login \
        $(registryServerName) \
        -u $(registryLogin) \
        --password-stdin
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: 'docker login'
- bash: |
    docker push $(registryServerName)/$(imageName):$(imageTag)
  failOnStderr: true
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: 'docker push'
- task: HelmInstaller@1
  displayName: 'install helm'
  inputs:
    helmVersionToInstall: $(helmVersion)
- bash: |
    cd $(projectName)
    helm package \
        --version $(helmChartVersion) \
        --app-version $(imageTag) \
        charts/$(projectName)
  failOnStderr: true
  displayName: 'helm package'
- bash: |
    cd $(projectName)
    chartPackage=$(ls $(projectName)-$(helmChartVersion).tgz)
    helm registry login $(registryServerName) --username $(registryLogin) --password $(registryPassword) 
     # Save the Helm chart locally - version tag comes from chart version
    # A local save is required before you can push the chart to ACR
    chartVersion=`helm save charts/parrot $(registryServerName)/helm/$(projectName) | grep version | awk -F ': ' '{print $2}'`
    #helm push
    helm push $(registryServerName)/helm/$(projectName):$chartVersion    
    echo $(jq -n --arg version "$(helmChartVersion)" '{helmChartVersion: $version}') > $(build.artifactStagingDirectory)/variables.json
  failOnStderr: true
  name: helmPush
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: 'az acr helm push'
- publish: $(build.artifactStagingDirectory)
  artifact: build-artifact
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
